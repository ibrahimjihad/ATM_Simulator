
.MODEL SMALL
 
.STACK 100H 

;WRITE MACRO 

INPUT MACRO
MOV AH,1
INT 21H
ENDM 

NEWLINE MACRO
MOV DL,10
MOV AH,2
INT 21H
MOV DL,13
MOV AH,2
INT 21H
ENDM


.DATA
PIN db 1,0,4,8,2,3,8,9
BALANCE1 dw 5000d
BALANCE2 dw 1000d 
USER  db    0d
LOCKED db   0d
COMMAND db  9d ;digit 9 bear no significance 
WELCOMEMSG    db 10,13,  "WELCOME TO SECURE TECH$"
INVALIDMSG    db 10,13, "Invalid PIN..Please Try again$" 
LOCKMSG       dw  10,13,"Your ID: **** Has been locked$" 
WELCOMEMSG2      dw  10,13,"Welcome User$"
BALANCEMSG       db  10,13,"PRESS: 1 : CHECK BALANACE$"
BALANCE_LIMIT_MSG dw 10,13, "Balance limit crossed. Please enter lower amount$"
DEPO_SUCCESS_MSG dw 10,13, "Deposit successful$"
WITH_SUCCESS_MSG dw 10,13, "Withdraw successful$"
INSUFFICIENT_BALANCE_MSG dw 10,13, "Insufficient balance. Please try again.$"
DEPOSITMSG   db  10,13,"PRESS: 2 : DEPOSIT MONEY$"
WITHDRAWMSG  db   10,13,"PRESS: 3 : WITHDRAW MONEY$"
TRANSACTIONMSG db 10,13,"PRESS: 4 : TRANSACTION LOG$"
LOGOUTMSG      db 10,13,"PRESS: 0 : LOGOUT$" 
KEYMSG         db 10,13, "PRESS KEY: $"
PINMSG         db 10,13, "Please Enter Your PIN: $" 
BALANCEMSG2    db 10,13, "YOUR BALANCE IS: $"
ENTER_DEPO_MSG db 10,13, "ENTER 4 DIGIT DEPOSIT AMOUNT: $"
ENTER_WITH_MSG db 10,13, "ENTER 4 DIGIT WITHDRAW AMOUNT: $" 
INP            db ?
VAR            db ? 
NUMBER         dw ? 
TEMP           dw 9999 
DEPO           dw ?  
WITH           dw ?
DIVISOR        dw  10000
TEN            dw  10

LogOUT dw 10,13,"You have been logged out of the system$"

;=========================================================================================================

USER1_DEP DB 20 DUP(?)
USER1_WITH DB 20 DUP(?)
USER1_DEP_ARRAY_LENGTH DW 0
USER1_WITH_ARRAY_LENGTH DW 0
USER2_DEP DB 20 DUP(?)
USER2_WITH DB 20 DUP(?)
USER2_DEP_ARRAY_LENGTH DW 0
USER2_WITH_ARRAY_LENGTH DW 0
BLANK DB 0DH, 0AH, '$'
DEPTYPE DB "YOU HAVE DEPOSITED: $"
WITHTYPE DB "YOU HAVE WITHDRAWED: $"  

;=========================================================================================================
.CODE
MAIN PROC

;iniitialize DS

MOV AX,@DATA
MOV DS,AX
;CODE
LEA DX,WELCOMEMSG
CALL PRINT

MOV VAR,0
LSTART:
CMP VAR,3 
JGE LEND
CALL EPIN  
INC VAR 
CMP LOCKED,1
JE  LEND
JMP LSTART
LEND:
CMP LOCKED,0
JE  LOCKIE
JNE NEXTOP

LOCKIE:
LEA DX,LOCKMSG
CALL PRINT
JMP  SORRY

NEXTOP:
LEA DX,WELCOMEMSG2
CALL PRINT
LEA DX,BALANCEMSG
CALL PRINT
LEA DX,DEPOSITMSG
CALL PRINT
LEA DX,WITHDRAWMSG
CALL PRINT
LEA DX,TRANSACTIONMSG
CALL PRINT
LEA DX,LOGOUTMSG
CALL PRINT
LEA DX,KEYMSG
CALL PRINT
INPUT
SUB AL,48
CMP AL,0
JE  SORRY

CMP AL,1 
JE  BAL
JNE IBRAHIM_DEPO  ;ADD AND EDIT LOGIC FOR OPTION 2,3,4
BAL:
CMP USER,1
JE USERONE
JNE USERTWO
USERONE:  
LEA DX,BALANCEMSG2
CALL PRINT

MOV AX,BALANCE1
CALL PRINT_DIGITS
JMP NEXTOP

USERTWO:
LEA DX,BALANCEMSG2
CALL PRINT   

MOV AX,BALANCE2
CALL PRINT_DIGITS
JMP NEXTOP

IBRAHIM_DEPO:
CMP AL,2   
JE DEPOS
JNE IBRAHIM_WITHDRAW 



DEPOS:
LEA DX,ENTER_DEPO_MSG
CALL PRINT
MOV AH,1
INT 21H
SUB AL,30H 
mov BL,100
mul BL
MOV BX,10
MUL BX
MOV DEPO,AX 

MOV AH,1
INT 21H
SUB AL,30H 
mov BL,100
mul BL
add DEPO,AX

MOV AH,1
INT 21H
SUB AL,30H 
mov BL,10
mul BL
add DEPO,AX

MOV AH,1
INT 21H
SUB AL,30H 
mov BL,1
mul BL
add DEPO,AX

CMP USER,1
JE USERONE_DEPO
JNE USERTWO_DEPO

USERONE_DEPO:
MOV CX,TEMP
SUB CX,BALANCE1
CMP CX,DEPO
MOV CX,0
jL EXCEED1
JGE DEPO_TRANSACTION1
EXCEED1:
lea dx,BALANCE_LIMIT_MSG
CALL PRINT
MOV DEPO,0 
JMP NEXTOP

DEPO_TRANSACTION1:
MOV CX,DEPO  
ADD BALANCE1,CX
MOV CX, USER1_DEP_ARRAY_LENGTH
ADD CX,4
LEA SI, USER1_DEP
ADD SI, CX
MOV CX, 0
DEC SI
JMP M2
M2:
MOV AX, DEPO
MOV DX, 0
MOV BX, 10
DIV BX
MOV DEPO, AX
MOV [SI], DL
DEC SI
INC CX
CMP CX,4
JNE M2
MOV CX,USER1_DEP_ARRAY_LENGTH 
ADD CX,4
MOV USER1_DEP_ARRAY_LENGTH,CX

MOV DEPO,0
lea DX, DEPO_SUCCESS_MSG
CALL PRINT
JMP NEXTOP

USERTWO_DEPO:
MOV CX,TEMP
SUB CX,BALANCE2
CMP CX,DEPO
MOV CX,0
jL EXCEED2
JGE DEPO_TRANSACTION2
EXCEED2:
lea dx,BALANCE_LIMIT_MSG
CALL PRINT
MOV DEPO,0 
JMP NEXTOP

DEPO_TRANSACTION2:
MOV CX,DEPO  
ADD BALANCE2,CX
MOV CX, USER2_DEP_ARRAY_LENGTH
ADD CX,4
LEA SI, USER2_DEP
ADD SI, CX
MOV CX, 0
DEC SI
JMP M3
M3:
MOV AX, DEPO
MOV DX, 0
MOV BX, 10
DIV BX
MOV DEPO, AX
MOV [SI], DL
DEC SI
INC CX
CMP CX,4
JNE M3
MOV CX,USER2_DEP_ARRAY_LENGTH 
ADD CX,4
MOV USER2_DEP_ARRAY_LENGTH,CX
MOV DEPO,0 
lea DX, DEPO_SUCCESS_MSG
CALL PRINT
JMP NEXTOP



IBRAHIM_WITHDRAW:


CMP AL,3

JE WITHDRAW 
JNE TRANSACTION
WITHDRAW:
LEA DX,ENTER_WITH_MSG
CALL PRINT
MOV AH,1
INT 21H
SUB AL,30H 
mov BL,100
mul BL
MOV BX,10
MUL BX
MOV WITH,AX 

MOV AH,1
INT 21H
SUB AL,30H 
mov BL,100
mul BL
add WITH,AX

MOV AH,1
INT 21H
SUB AL,30H 
mov BL,10
mul BL
add WITH,AX

MOV AH,1
INT 21H
SUB AL,30H 
mov BL,1
mul BL
add WITH,AX

        
CMP USER,1 
JE USER1_WITHDRAW
JNE USER2_WITHDRAW

USER1_WITHDRAW:
MOV CX,BALANCE1
CMP CX,WITH
JL INSUFFICIENT1
JGE WITH_TRANSACTION1
INSUFFICIENT1: 
LEA DX,INSUFFICIENT_BALANCE_MSG
CALL PRINT    
MOV WITH,0
JMP NEXTOP

WITH_TRANSACTION1: 
MOV CX,WITH
SUB BALANCE1,CX
LEA DX,WITH_SUCCESS_MSG
CALL PRINT
MOV CX, USER1_WITH_ARRAY_LENGTH
ADD CX,4
LEA SI, USER1_WITH
ADD SI, CX
MOV CX, 0
DEC SI
JMP M4
M4:
MOV AX, WITH
MOV DX, 0
MOV BX, 10
DIV BX
MOV WITH, AX
MOV [SI], DL
DEC SI
INC CX
CMP CX,4
JNE M4
MOV CX,USER1_WITH_ARRAY_LENGTH 
ADD CX,4
MOV USER1_WITH_ARRAY_LENGTH,CX  
MOV WITH,0  
JMP NEXTOP

USER2_WITHDRAW:
MOV CX,BALANCE2
CMP CX,WITH
JL INSUFFICIENT2
JGE WITH_TRANSACTION2
INSUFFICIENT2: 
LEA DX,INSUFFICIENT_BALANCE_MSG
CALL PRINT    
MOV WITH,0
JMP NEXTOP

WITH_TRANSACTION2: 
MOV CX,WITH
SUB BALANCE2,CX
LEA DX,WITH_SUCCESS_MSG
CALL PRINT
MOV CX, USER2_WITH_ARRAY_LENGTH
ADD CX,4
LEA SI, USER2_WITH
ADD SI, CX
MOV CX, 0
DEC SI
JMP M5
M5:
MOV AX, WITH
MOV DX, 0
MOV BX, 10
DIV BX
MOV WITH, AX
MOV [SI], DL
DEC SI
INC CX
CMP CX,4
JNE M5
MOV CX,USER2_WITH_ARRAY_LENGTH 
ADD CX,4
MOV USER2_WITH_ARRAY_LENGTH,CX  
MOV WITH,0  
JMP NEXTOP  


;*****DO YOUR CODE FROM HERE****

TRANSACTION:
CMP AL,4
JE Transaction_Log
JG SORRY 

Transaction_Log:

CMP USER, 1
JE UONE
JNE UTWO

CMP USER, 1
JE UONE
JNE UTWO

UONE: 

MOV CX,USER1_DEP_ARRAY_LENGTH
CMP CX, 0                  
JE WITHCHECK 
MOV SI,0
JMP D1L
D1L:
NEWLINE
LEA DX,DEPTYPE
CALL Transaction_Type
MOV BX,0
JMP D2L
D2L:
MOV AL, USER1_DEP[SI]      
CALL Print_Number          
INC SI                      
INC BX 
CMP BX,4
JNE D2L
CMP SI, USER1_DEP_ARRAY_LENGTH
JNE D1L

JMP WITHCHECK

WITHCHECK:
MOV CX,USER1_WITH_ARRAY_LENGTH
CMP CX, 0                  
JE NEXTOP
MOV SI,0
JMP D3L
D3L:
NEWLINE
LEA DX,WITHTYPE
CALL Transaction_Type
MOV BX,0
JMP D4L
D4L:
MOV AL, USER1_WITH[SI]      
CALL Print_Number          
INC SI                      
INC BX 
CMP BX,4
JNE D4L
CMP SI, USER1_WITH_ARRAY_LENGTH
JNE D3L

JMP NEXTOP            

UTWO:  

MOV CX,USER2_DEP_ARRAY_LENGTH
CMP CX, 0                  
JE User2WithdrawCheck
MOV SI,0
DEC CX
JMP D5L
D5L:
NEWLINE
LEA DX,DEPTYPE
CALL Transaction_Type
MOV BX,0
JMP D6L
D6L:
MOV AL, USER2_DEP[SI]      
CALL Print_Number          
INC SI                     
DEC CX 
INC BX 
CMP BX,4
JNE D6L
CMP SI, USER2_DEP_ARRAY_LENGTH
JNE D5L

JMP User2WithdrawCheck

User2WithdrawCheck:

MOV CX,USER2_WITH_ARRAY_LENGTH
CMP CX, 0
JE NEXTOP
MOV SI,0                  
DEC CX
JMP D7L
D7L:
NEWLINE
LEA DX,WITHTYPE
CALL Transaction_Type
MOV BX,0
JMP D8L
D8L:
MOV AL, USER2_WITH[SI]      
CALL Print_Number          
INC SI                     
DEC CX 
INC BX 
CMP BX,4
JNE D8L
CMP SI, USER2_WITH_ARRAY_LENGTH
JNE D7L

JMP NEXTOP 



SORRY:
;exit to DOS
LEA DX,LogOUT
CALL PRINT
MOV AX,4C00H
INT 21H

MAIN ENDP

;WRITE PROC
EPIN PROC 
LEA DX,PINMSG
CALL PRINT ;PRINT PROC CALL
INPUT
MOV INP,AL
SUB AL,48
MOV SI,0
MOV BL,PIN[SI]
MOV SI,4
MOV BH,PIN[SI]
CMP AL,BL
JE  L2                   
CMP AL,BH
JNE L1
JE  L2
L1:
INPUT  ;INPUT MACRO CALL   ;FOR SECURITY FEATURE
INPUT     ;FIRST DIGIT WRONG
INPUT
MOV USER,0d
LEA DX,INVALIDMSG
CALL PRINT  
JMP EXIT

L2:
CALL PINCHECKER 
MOV DL,USER        ;FIRST DIGIT CORRECT
CMP DL,0h           ; DL!=0 MEANS CORRECT PIN
JNE  FORWARD
JE   MSG

MSG:
LEA DX,INVALIDMSG
CALL PRINT
JMP EXIT

FORWARD:
MOV LOCKED,1d

EXIT: 
RET    
EPIN ENDP 

PRINT PROC 
MOV AH,9
INT 21h
RET 
PRINT ENDP 

PINCHECKER PROC  
MOV BL,INP  
SUB BL,48
CMP BL,1
JE  USER1
JNE USER2

USER1:
MOV USER,1d 
MOV SI,1
JMP MAINL
USER2:
MOV USER,2d
MOV SI,5

MAINL:
MOV CL,30h 
PINLOOP:
CMP CL,33h
JGE END
INPUT
SUB AL,48
MOV BH,PIN[SI]
CMP AL,BH
JNE FAKE
JE  REAL  

FAKE: 
MOV USER,0d
CMP CL,31h
JE  ONE 
CMP CL,32h
JE  ZERO
INC CL
INPUT
ONE:          ;FOR SECURITY FEATURE
INC CL 
INPUT
ZERO:

REAL:
INC SI
INC CL 
JMP PINLOOP
END: 
RET  
PINCHECKER ENDP 

PRINT_DIGITS PROC ;DIGITS MUST BE IN AX REGISTER 
MOV CX,5 
MOV NUMBER,AX 
MOV DIVISOR,10000d         ;BEFORE CALLING : ex- MOV AX,00000d 
LOOPDIGITS:
MOV DX,0
MOV AX,NUMBER
DIV DIVISOR
MOV NUMBER,DX

MOV DX,AX
ADD DX,30H
MOV AH,2
INT 21H

MOV DX,0
MOV AX,DIVISOR
DIV TEN
MOV DIVISOR,AX

LOOP LOOPDIGITS
      
RET
PRINT_DIGITS ENDP

Print_Number PROC
    ADD AL, 30H            
    MOV DL, AL             
    MOV AH, 02H             
    INT 21H
    RET
Print_Number ENDP

Print_Newline PROC
    LEA DX, BLANK     
    MOV AH, 09H           
    INT 21H
    RET
Print_Newline ENDP

Transaction_Type PROC
         
    MOV AH, 09H           
    INT 21H
    RET
Transaction_Type ENDP

END MAIN


